{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "WACC",
	"patterns": [
    {
      "include": "#operators"
    },
    {
      "include": "#function-signatures"
    },
    {
      "include": "#types"
    },
    {
      "include": "#control-statements"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#variables"
    },
		{
			"include": "#strings"
    },
    {
      "include": "#comment"
    }
	],
	"repository": {
		"operators": {
      "patterns": [
        {
          "include": "#unary-operators"
        },
        {
          "include": "#binary-operators"
        }
      ]
    },
    "control-statements": {
      "patterns": [
        {
          "include": "#code-block"
        },
        {
          "include": "#conditional-statement"
        },
        {
          "include": "#loop"
        },
        {
          "include": "#builtin-functions"
        },
        {
          "include": "#termination-statement"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "include": "#method-names"
        },
        {
          "include": "#normal-variables"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "include": "#array-type"
        },
        {
          "include": "#pair-type"
        },
        {
          "include": "#base-types"
        }
      ]
    },
		"strings": {
			"name": "string.quoted.double.wacc",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.wacc",
					"match": "\\\\."
				}
			]
    },
    "constants": {
      "patterns": [
        {
          "include": "#normal-constants"
        },
        {
          "include": "#characters"
        }
      ]
		},
    "function-signatures": {
			"begin": "((?:int|char|bool|string|pair\\(\\s*\\w+,\\s*\\w+\\s*\\))(?:\\[\\])*)\\s+([_a-zA-Z](?:[_a-zA-Z0-9])*)\\s*\\(",
			"beginCaptures": {
				"1": {
          "patterns": [
            {
              "include": "#types"
            }
          ]
        },
        "2": {
          "name": "entity.name.function.wacc"
        }
			},
			"end": "\\)",
      "patterns": [
				{
					"include": "#function-params"
				}
			]
		},
		"function-params": {
			"match": "((?:int|char|bool|string|pair\\(\\s*\\w+,\\s*\\w+\\s*\\))(?:\\[\\])*)\\s+(\\w+)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				"2": {
					"name": "variable.parameter.wacc"
				}
			}
		},
    "code-block": {
      "patterns": [
        {
          "name": "keyword.control.wacc",
          "match": "((\\b(begin|is|end)\\b)|;)"
        }
      ]
    },
    "builtin-functions": {
      "patterns": [
        {
          "name": "keyword.control.wacc",
          "match": "\\b(print|println|read|free|call)\\b"
        }
      ]
    },
    "loop": {
      "patterns": [
        {
          "name": "keyword.control.wacc",
          "match": "\\b(while|do|done)\\b"
        }
      ]
    },
    "conditional-statement": {
      "patterns": [
        {
          "name": "keyword.control.conditional.wacc",
          "match": "(if|else|then|fi)"
        }
      ]
    },
    "termination-statement": {
      "patterns": [
        {
          "name": "keyword.other.wacc",
          "match": "\\b(skip|return|exit)\\b"
        }
      ]
    },
    "base-types": {
			"match": "\\b(int|bool|char|string)\\b",
			"captures": {
				"1": {
					"name": "storage.type.wacc"
				}
			}
    },
    "pair-type": {
      "patterns": [
        {
          "name": "storage.type.wacc",
          "match": "(pair\\(\\s*\\w+,\\s*\\w+\\s*\\))"
        }
      ]
    },
    "array-type": {
      "patterns": [
        {
          "name": "storage.type.wacc",
          "match": "\\b(int|bool|char|string|(pair\\(\\s*\\w+,\\s*\\w+\\s*\\)))\\s*(\\[\\])+"
        }
      ]
    },
    "unary-operators": {
      "patterns": [
        {
          "name": "keyword.operator.wacc",
          "match": "\\b(!|len|ord|chr|-|fst|snd)\\b"
        }
      ]
    },
    "binary-operators": {
      "patterns": [
        {
          "name": "keyword.operator.wacc",
          "match": "(=|\\*|\\/|>|>=|<|<=|==|!=|&&|\\|\\||\\+|%)"
        }
      ]
    },
    "normal-variables": {
      "patterns": [
        {
          "name": "variable.other.wacc",
          "match": "(\\b[_a-zA-Z]([_a-zA-Z0-9])*\\b)"
        }
      ]
    },
    "method-names": {
      "match": "([_a-zA-Z]([_a-zA-Z0-9])*)\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.function.wacc"
        }
      }
    },
    "normal-constants": {
      "patterns": [
        {
          "name": "constant.numeric.wacc",
          "match": "(((\\+|-)?\\d+)|null|true|false)"
        }
      ]
    },
    "characters": {
      "name": "string.quoted.single.wacc",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.wacc",
					"match": "\\\\."
				}
			]
    },
    "comment": {
      "name": "comment.line.number-sign",
      "match": "#.*$\\n?"
    }
	},
	"scopeName": "source.wacc"
}